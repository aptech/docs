
inthp3
==============================================

Purpose
----------------

Integrates a user-defined function over the [a,+∞) interval that is oscillatory.

Format
----------------
.. function:: inthp3(&f,  pds,  ctl,  a)

    :param &f: pointer to the procedure containing the function to be integrated.
    :type &f: scalar

    :param pds: pointer to instance of a DS structure. The members of the DS are:
    :type pds: scalar

    .. csv-table::
        :widths: auto

        "pds->dataMatrix", "NxK matrix."
        "pds->dataArray", "NxKxL... array."
        "pds->vnames", "string array."
        "pds->dsname", "string."
        "pds->type", "scalar."
        "The contents, if any, are set by the user and are passed by inthp1 to the user-provided function without modification."

    :param ctl: instance of an inthpControl structure with members
    :type ctl: TODO

    .. csv-table::
        :widths: auto

        "ctl.maxEvaluations", "scalar, maximum number of function evaluations, default = 1e5;"
        "ctl.p", "scalar, termination parameter"
        "", "0", "heuristic termination, default."
        "", "1", "deterministic termination with infinity norm."
        "", "2,...", "deterministic termination with p-th norm."
        "ctl.d", "scalar termination parameter"
        "", "1", "if heuristic termination"
        "", "0 < ctl.d < π/2", "if deterministic termination"
        "ctl.eps", "scalar, relative error bound. Default = 1e-6."
        "A default ctl can be generated by calling inthpControlCreate."

    :param a: lower limits of integration.
    :type a: 1xN vector

    :returns: y (*Nx1 vector*), the estimated integrals of f(x)
        evaluated over the interval [a,+∞).

Examples
----------------

::

    #include inthp.sdf
     
    proc fct(struct DS *pd0, x);
       local m,a;
       m = pd0->dataMatrix[1];
       a = pd0->dataMatrix[2];
       retp( exp(-a*x)*cos(m*x));
    endp;
     
    struct DS d0;
    struct DS *pd0;
     
    struct inthpControl c0;
    c0 = inthpControlCreate;
     
    c0.p = 2;
    c0.d = pi/3;
     
    m = 2;
    a = 1;
    pd0 = &d0;
    d0.dataMatrix = m | a;
     
    lim = 0;
     
    r = inthp3(&fct,pd0,c0,lim);
     
    format /ld 16,10;
    print r;
    print a/(a*a + m*m);

produces the following output:

::

    0.2000000000 
     0.2000000000

References
++++++++++

#. ''Optimal Quadratures in H_p Spaces'' by K. Sikorski and F. Stenger,
   ACM Transactions on Mathematical Software, 10(2):140-151, June 1984.

Source
++++++

inthp.src

.. seealso:: Functions :func:`inthpControlCreate`, :func:`inthp1`, :func:`inthp2`, :func:`inthp4`

intergrate user defined interval oscillartory
